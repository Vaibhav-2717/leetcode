class Solution {
    public int maxProfit(int[] prices) {
        int dp[][] = new int[prices.length][2];
        for(int i = 0; i < prices.length; i++)
            Arrays.fill(dp[i], -1);
        
        return maxProfit(prices, 0, 0, dp);
    }
    
    public int maxProfit(int[] prices, int day, int bought, int[][] dp) {
        if(day >= prices.length)
            return 0;
        
        if(dp[day][bought] != -1)
            return dp[day][bought];
        
        if(bought == 0) { // buy
            return dp[day][bought] = Math.max(maxProfit(prices, day + 1, 1, dp) - prices[day], maxProfit(prices, day + 1, bought, dp));
        }
        else { // sell
            return dp[day][bought] = Math.max(prices[day] + maxProfit(prices, day + 2, 0, dp), maxProfit(prices, day + 1, bought, dp));
        }
    }
}

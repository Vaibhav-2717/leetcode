//dfs approach---------------------------


class Solution {
    private class Point{
    private int x,y;
    public Point(int x,int y){
        this.x=x;
        this.y=y;
    }
}

    public void solve(char[][] board) {
      if(board.length==0 || board[0].length==0)
          return ;
        
     int n=board.length;
        int m=board[0].length;
        for(int i=0;i<n;i++){
            if(board[i][0]=='O')
                dfs(board,i,0);
        }
         for(int i=0;i<m;i++){
            if(board[0][i]=='O')
                dfs(board,0,i);
        }
         for(int i=0;i<n;i++){
            if(board[i][m-1]=='O')
                dfs(board,i,m-1);
        }
         for(int i=0;i<m;i++){
            if(board[n-1][i]=='O')
                dfs(board,n-1,i);
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='V'){
                    board[i][j]='O';
                }
            }
        }
    }
    
    private void dfs(char[][]board,int i,int j){
        if(i<0||j<0||i>=board.length||j>=board[0].length||(board[i][j]=='V')||(board[i][j]=='X')){
            return ;
        }else{
            board[i][j]='V';
            dfs(board,i-1,j);
             dfs(board,i+1,j);
             dfs(board,i,j-1);
             dfs(board,i,j+1);
        }
    }
}

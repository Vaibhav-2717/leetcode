class Solution {
    private int primeno=37;
    public String longestDupSubstring(String s) {
          int low=0;
        int high=s.length();
        
        String ans=""; 
        while(low<high){
           int mid=low + (high-low)/2;
            String str= duplicatestr(s,mid);
            if(str!=null && str.length()!=0){
                ans=str;
                low=mid+1;
            }else{
                high=mid;
            }
        }
        return ans;
    }
    private String duplicatestr(String s,int len){
        Set<Long>set=new HashSet<>();
        long currHash=getHash(s.substring(0,len));
        
        set.add(currHash);
        long pow=1;
        for(int i=1;i<len;i++) pow*=primeno;
        
        for(int l=1;l<=s.length()-len;l++){
            currHash=nextHash(pow,currHash,s.charAt(l-1),s.charAt(l+len-1));
            if(set.contains(currHash)){
                return s.substring(l,l+len);
            }
            set.add(currHash);
        }
        return null;
    }
    private long nextHash(long pow,long oldHash,char left,char right){
        return (oldHash-left*pow)*primeno + right;
    }
    
    private long getHash(String s){
        long hash=0,factor=1;
        
        for(int i=s.length()-1;i>=0;i--){
            hash+= s.charAt(i)*factor;
            factor *= primeno;
        }
        return hash;
    }
}
